import 'dart:async';

import 'package:firebase_database/firebase_database.dart';
import 'package:flt_login/src/common/common.dart';
import 'package:flt_login/src/ui/ai/ai.dart';
import 'package:flt_login/src/ui/shape/circle/circle.dart';
import 'package:flt_login/src/ui/shape/cross/cross.dart';
import 'package:flt_login/src/ui/victory.dart';
import 'package:flt_login/src/ui/victory_checker.dart';
import 'package:flt_login/src/ui/victory_line.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class Game extends StatefulWidget {
  final SharedPreferences prefs;

  Game(
      {Key key,
      this.title,
      this.type,
      this.me,
      this.gameId,
      this.withId,
      this.prefs})
      : super(key: key);

  final String title, type, me, gameId, withId;

  @override
  GameState createState() =>
      GameState(type: type, me: me, gameId: gameId, withId: withId);
}

class GameState extends State<Game> {
  BuildContext _context;
  List<List<String>> field = [
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''],
  ];
  AI ai;
  String playerChar = 'X', aiChar = 'O';
  bool playersTurn = true;
  Victory victory;
  final String type, me, gameId, withId;

  GameState({this.type, this.me, this.gameId, this.withId});

  @override
  void initState() {
    super.initState();
    if (me != null) {
      playersTurn = me == 'X';
      playerChar = me;

      FirebaseDatabase.instance
          .reference()
          .child(GAME_TBL)
          .child(gameId)
          .onChildAdded
          .listen((Event event) {
        String key = event.snapshot.key;
        if (key != 'restart') {
          int row = int.parse(key.substring(0, 1));
          int column = int.parse(key.substring(2, 3));
          if (field[row][column] != me) {
            setState(() {
              field[row][column] = event.snapshot.value;
              playersTurn = true;
              Timer(Duration(milliseconds: 600), () {
                setState(() {
                  checkForVictory();
                });
              });
            });
          }
        } else if (key == 'restart') {
          FirebaseDatabase.instance.reference().child(gameId).set(null);

          setState(() {
            Scaffold.of(_context).hideCurrentSnackBar();
            cleanUp();
          });
        }
      });

      // Haven't figured out how to display a Snackbar during build yet
      new Timer(Duration(milliseconds: 1000), () {
        String text = playersTurn ? 'Your turn' : 'Opponent\'s turn';
        print(text);
        Scaffold.of(_context).showSnackBar(SnackBar(content: Text(text)));
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    ai = AI(field, playerChar, aiChar);

    return WillPopScope(
      onWillPop: () async => false,
      child: Scaffold(
          appBar: AppBar(
            title: Text(widget.title),
            actions: <Widget>[
              Container(
                margin: const EdgeInsets.all(15.0),
                padding: const EdgeInsets.all(3.0),
                decoration: BoxDecoration(
                    color:Colors.red,inserBoxDecorationt_emoticon
                    border: Border.all(color: Colors.black),
                    borderRadius: BorderRadius.circular(5)),
                child: InkWell(
                  onTap: _showDialog,
                  child: Text(
                    'X',
                    style:
                        TextStyle(fontSize: 10.0, fontWeight: FontWeight.bold),
                  ),
                ),
              ),
            ],
          ),
          body: Builder(builder: (BuildContext context) {
            _context = context;
            return Center(
                child: Stack(
                    children: [buildGrid(), buildField(), buildVictoryLine()]));
          })),
    );
  }

  ///
  /// build line
  ///
  Widget buildGrid() => AspectRatio(
      aspectRatio: 1.0,
      child: Stack(
        children: [
          Column(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
            buildHorizontalLine,
          ]),
          Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
            buildVerticalLine,
          ])
        ],
      ));

  Container get buildVerticalLine => Container(
//      margin: EdgeInsets.only(top: 1.0, bottom: 1.0),
      color: Colors.blue,
      width: 1.0);

  Container get buildHorizontalLine => Container(
//      margin: EdgeInsets.only(left: 16.0, right: 16.0),
      color: Colors.blue,
      height: 1.0);

  ///
  /// build field.
  ///
  Widget buildField() => AspectRatio(
      aspectRatio: 1.0,
      child:
          Column(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(0, 0),
              buildCell(0, 1),
              buildCell(0, 2),
              buildCell(0, 3),
              buildCell(0, 4),
              buildCell(0, 5),
              buildCell(0, 6),
              buildCell(0, 7),
              buildCell(0, 8),
              buildCell(0, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(1, 0),
              buildCell(1, 1),
              buildCell(1, 2),
              buildCell(1, 3),
              buildCell(1, 4),
              buildCell(1, 5),
              buildCell(1, 6),
              buildCell(1, 7),
              buildCell(1, 8),
              buildCell(1, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(2, 0),
              buildCell(2, 1),
              buildCell(2, 2),
              buildCell(2, 3),
              buildCell(2, 4),
              buildCell(2, 5),
              buildCell(2, 6),
              buildCell(2, 7),
              buildCell(2, 8),
              buildCell(2, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(3, 0),
              buildCell(3, 1),
              buildCell(3, 2),
              buildCell(3, 3),
              buildCell(3, 4),
              buildCell(3, 5),
              buildCell(3, 6),
              buildCell(3, 7),
              buildCell(3, 8),
              buildCell(3, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(4, 0),
              buildCell(4, 1),
              buildCell(4, 2),
              buildCell(4, 3),
              buildCell(4, 4),
              buildCell(4, 5),
              buildCell(4, 6),
              buildCell(4, 7),
              buildCell(4, 8),
              buildCell(4, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(5, 0),
              buildCell(5, 1),
              buildCell(5, 2),
              buildCell(5, 3),
              buildCell(5, 4),
              buildCell(5, 5),
              buildCell(5, 6),
              buildCell(5, 7),
              buildCell(5, 8),
              buildCell(5, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(6, 0),
              buildCell(6, 1),
              buildCell(6, 2),
              buildCell(6, 3),
              buildCell(6, 4),
              buildCell(6, 5),
              buildCell(6, 6),
              buildCell(6, 7),
              buildCell(6, 8),
              buildCell(6, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(7, 0),
              buildCell(7, 1),
              buildCell(7, 2),
              buildCell(7, 3),
              buildCell(7, 4),
              buildCell(7, 5),
              buildCell(7, 6),
              buildCell(7, 7),
              buildCell(7, 8),
              buildCell(7, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(8, 0),
              buildCell(8, 1),
              buildCell(8, 2),
              buildCell(8, 3),
              buildCell(8, 4),
              buildCell(8, 5),
              buildCell(8, 6),
              buildCell(8, 7),
              buildCell(8, 8),
              buildCell(8, 9),
            ])),
        Expanded(
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
              buildCell(9, 0),
              buildCell(9, 1),
              buildCell(9, 2),
              buildCell(9, 3),
              buildCell(9, 4),
              buildCell(9, 5),
              buildCell(9, 6),
              buildCell(9, 7),
              buildCell(9, 8),
              buildCell(9, 9),
            ])),
      ]));

  Widget buildCell(int row, int column) => AspectRatio(
      aspectRatio: 1.0,
      child: GestureDetector(
          onTap: () {
            if (!gameIsDone() && playersTurn) {
              setState(() {
                displayPlayersTurn(row, column);

                if (!gameIsDone() && type == null) {
                  displayAiTurn();
                }
              });
            }
          },
          child: buildCellItem(row, column)));

  Widget buildCellItem(int row, int column) {
    var cell = field[row][column];
    if (cell.isNotEmpty) {
      if (cell == 'X') {
        return Container(padding: EdgeInsets.all(1.0), child: Cross());
      } else {
        return Container(padding: EdgeInsets.all(1.0), child: Circle());
      }
    } else {
      return null;
    }
  }

  Widget buildVictoryLine() => AspectRatio(
      aspectRatio: 1.0, child: CustomPaint(painter: VictoryLine(victory)));

  void displayPlayersTurn(int row, int column) {
    print('clicked on row $row column $column');
    playersTurn = false;
    field[row][column] = playerChar;

    if (type != null && type == 'wifi') {
      FirebaseDatabase.instance
          .reference()
          .child(GAME_TBL)
          .child(gameId)
          .child('${row}_${column}')
          .set(me);
    }

    Timer(Duration(milliseconds: 600), () {
      setState(() {
        checkForVictory();
      });
    });
  }

  void displayAiTurn() {
    Timer(Duration(milliseconds: 1000), () {
      setState(() {
        // AI turn
        var aiDecision = ai.getDecision();
        field[aiDecision.row][aiDecision.column] = aiChar;
        playersTurn = true;
        Timer(Duration(milliseconds: 600), () {
          setState(() {
            checkForVictory();
          });
        });
      });
    });
  }

  bool gameIsDone() {
    return allCellsAreTaken() || victory != null;
  }

  bool allCellsAreTaken() {
    return field[0][0].isNotEmpty &&
        field[0][1].isNotEmpty &&
        field[0][2].isNotEmpty &&
        field[1][0].isNotEmpty &&
        field[1][1].isNotEmpty &&
        field[1][2].isNotEmpty &&
        field[2][0].isNotEmpty &&
        field[2][1].isNotEmpty &&
        field[2][2].isNotEmpty;
  }

  void checkForVictory() {
    victory = VictoryChecker.checkForVictory(field, playerChar);
    if (victory != null) {
      String message;

      if (victory.winner == PLAYER_WINNER) {
        message = 'You Win!';
      } else if (victory.winner == AI_WINNER) {
        message = type == null ? 'AI Win!' : 'You loose!';
      } else if (victory.winner == DRAFT) {
        message = 'Draft';
      }
      print(message);
      Scaffold.of(_context).showSnackBar(SnackBar(
        content: Text(message),
        duration: Duration(minutes: 1),
        action: SnackBarAction(
            label: 'Retry',
            onPressed: () {
              if (type == null) {
                setState(() {
                  victory = null;
                  field = [
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                    ['', '', '', '', '', '', '', '', '', ''],
                  ];
                  playersTurn = true;
                });
              } else {
                restart();
              }
            }),
      ));
    }
  }

  void restart() async {
    await FirebaseDatabase.instance
        .reference()
        .child(GAME_TBL)
        .child(gameId)
        .set(null);

    await FirebaseDatabase.instance
        .reference()
        .child(GAME_TBL)
        .child(gameId)
        .child('restart')
        .set(true);

    setState(() {
      cleanUp();
    });
  }

  void cleanUp() {
    victory = null;
    field = [
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', '', '', ''],
    ];
    playersTurn = me == 'X';
    String text = playersTurn ? 'Your turn' : 'Opponent\'s turn';
    print(text);
    Scaffold.of(_context).showSnackBar(SnackBar(content: Text(text)));
  }

  void _showDialog() {
    showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            content: Text('Do you want to quit the game ?'),
            actions: <Widget>[
              FlatButton(
                child: Text('Close'),
                onPressed: () {
                  Navigator.of(context).pop(CANCEL);
                },
              ),
              FlatButton(
                child: Text('Yes'),
                onPressed: () {
                  Navigator.pushNamed(context, MYPAGE);
                },
              )
            ],
          );
        });
  }
}
